// using System;
// using UnityEngine;
// using UnityEditor;
// using System.IO;
// using System.Text;
// using System.Xml;
// using System.Collections.Generic;
// using Object = UnityEngine.Object;

// namespace SOM
// {
// 	/// <summary>
// 	/// This class is responsible for generating the layout of the generated C# file. Modules acces this class directly to add modules and constants.
// 	/// </summary>
// 	public static class SOMXmlHandler
// 	{

// 		//========================================
// 		//Constants
// 		//========================================
// 		// const string NAME = "String-O-Matic.xml";
// 		const string MODULE_LABEL = "module";
// 		const string MODULE_ATTRIBUTE_NAME = "name";
// 		const string CONSTANT_LABEL = "constant";
// 		const string ROOT_NODE = "root";

// 		//========================================
// 		//Vars
// 		//========================================
// 		static XmlDocument _document;

// 		// static string _path
// 		// {
// 		// 	get
// 		// 	{
// 		// 		return SOMUtils.GetValidTargetDir();
// 		// 	}
// 		// }

// 		//========================================
// 		//Properties
// 		// //========================================
// 		// static string path
// 		// {
// 		// 	get
// 		// 	{
// 		// 		if (_path == null)
// 		// 		{
// 		// 			string[] folders = Directory.GetDirectories("Assets/", "StringOMatic*", SearchOption.AllDirectories);
// 		// 			if (folders.Length == 0)
// 		// 				throw new FileNotFoundException("StringOMatic folder could not be found");
// 		// 			if (folders.Length > 1)
// 		// 				throw new FileLoadException("More than one StringOMatic folder were found");
// 		// 			_path = folders[0] + "/";
// 		// 		}
// 		// 		return _path;
// 		// 	}
// 		// }
// 		static string fullPath
// 		{
// 			get
// 			{
// 				return Path.Combine(SOMUtils.GetValidTargetDir(SOMPreferences.GetTargetDir()), SOMPreferences.GetClassName()) + ".xml";
// 			}
// 		}
// 		static XmlDocument Document
// 		{
// 			get
// 			{
// 				if (_document == null || !File.Exists(fullPath))
// 				{
// 					_document = LoadDocument();
// 				}
// 				return _document;
// 			}
// 		}

// 		static XmlDocument LoadDocument()
// 		{
// 			if (File.Exists(fullPath))
// 			{
// 				XmlDocument doc = new XmlDocument();
// 				doc.Load(fullPath);
// 				return doc;
// 			}
// 			else
// 			{
// 				return CreateDocument();
// 			}
// 		}

// 		//========================================
// 		//Initialization
// 		//========================================
// 		/// <summary>
// 		/// Creates the xml document.
// 		/// </summary>
// 		/// 
// 		public static XmlDocument CreateDocument()
// 		{
// 			XmlDocument _document = new XmlDocument();
// 			XmlDeclaration declaration = _document.CreateXmlDeclaration("1.0", "UTF-8", null);
// 			_document.AppendChild(declaration);

// 			XmlComment comment = _document.CreateComment(
// 	   		"=======================================================================\n" +
// 	   		"THIS DOCUMENT IS AUTOGENERATED AND SHOULD NOT BE MANUALLY EDITED OR DELETED\n" +
// 	   		"=========================================================================="
//    			);
// 			_document.AppendChild(comment);


// 			XmlElement root = _document.CreateElement(ROOT_NODE);
// 			_document.AppendChild(root);

// 			_document.Save(fullPath);

// 			return _document;


// 		}
// 		public static void CreateDocument2()
// 		{

// 			XmlWriter writer = XmlWriter.Create(fullPath);
// 			writer.WriteStartDocument();
// 			writer.WriteRaw(
// 				"<!--=======================================================================\n" +
// 				"THIS DOCUMENT IS AUTOGENERATED AND SHOULD NOT BE MANUALLY EDITED OR DELETED\n" +
// 				"==========================================================================-->"
// 			);
// 			writer.Settings.Indent = true;
// 			writer.WriteStartElement(ROOT_NODE);
// 			writer.WriteEndElement();
// 			writer.WriteEndDocument();
// 			writer.Close();
// 		}

// 		//========================================
// 		//Add
// 		//========================================
// 		/// <summary>
// 		/// Adds a module with the specified path.
// 		/// </summary>
// 		public static void AddModule(string path)
// 		{
// 			// Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException(nameof(path));
// 			if (ModuleExists(path))
// 				throw new ModuleAlreadyExistsException(path);

// 			string parentPath = string.Empty;
// 			if (path.Contains("."))
// 			{
// 				parentPath = path.Substring(0, path.LastIndexOf('.'));
// 				path = path.Substring(parentPath.Length + 1);

// 				// Check if the parent module exists
// 				if (!ModuleExists(parentPath))
// 				{
// 					// If the parent module doesn't exist, recursively add it
// 					AddModule(parentPath);

// 					// Check if the parent module was successfully added
// 					if (!ModuleExists(parentPath))
// 					{
// 						// Throw an exception if the parent module couldn't be added
// 						throw new ModuleDoesNotExistException(parentPath);
// 					}
// 				}
// 			}

// 			// Retrieve the parent module
// 			XmlNode parent = GetModule(parentPath);

// 			// Ensure that the parent module is not null
// 			if (parent == null)
// 			{
// 				// Throw an exception if the parent module is null
// 				throw new ModuleDoesNotExistException(parentPath);
// 			}

// 			// Create the new module element
// 			XmlElement module = Document.CreateElement(MODULE_LABEL);
// 			module.SetAttribute(MODULE_ATTRIBUTE_NAME, path);

// 			// Append the new module element to the parent module
// 			parent.AppendChild(module);
// 		}

// 		/// <summary>
// 		/// Adds more than one constant to the specified module path.
// 		/// </summary>
// 		/// <param name="path">Module Path.</param>
// 		/// <param name="names">Array with the names of each constant.</param>
// 		/// <param name="values">Array with the values of each constant.</param>
// 		public static void AddConstants(string path, string[] names, string[] values)
// 		{
// 			//Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("path");
// 			if (names == null)
// 				throw new ArgumentNullException("names");
// 			if (values == null)
// 				throw new ArgumentNullException("values");
// 			if (names.Length != values.Length)
// 				throw new ArgumentException("names and values must have the same length");

// 			for (int i = 0; i < names.Length; i++)
// 				AddConstant(path, names[i], values[i]);
// 		}
// 		/// <summary>
// 		/// Adds a constant to the specified module path.
// 		/// </summary>
// 		/// <param name="path">Path.</param>
// 		/// <param name="name">Constant Name.</param>
// 		/// <param name="value">Constant Value.</param>
// 		public static void AddConstant(string path, string name, string value)
// 		{
// 			// Error handling and input validation
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException(nameof(path));
// 			if (name == null)
// 				throw new ArgumentNullException(nameof(name));
// 			if (value == null)
// 				throw new ArgumentNullException(nameof(value));

// 			XmlNode moduleNode = GetModule(path);
// 			if (moduleNode == null)
// 				throw new ModuleDoesNotExistException(path);

// 			if (ConstantExists(moduleNode, name))
// 				throw new ConstantAlreadyExistsException(path, name);

// 			// Create and append the constant element to the module
// 			XmlElement constantNode = Document.CreateElement("constant");
// 			constantNode.SetAttribute(name, value);
// 			moduleNode.AppendChild(constantNode);
// 		}


// 		//========================================
// 		//Modify
// 		//========================================
// 		/// <summary>
// 		/// Renames the module.
// 		/// </summary>
// 		/// <param name="oldPath">Old path.</param>
// 		/// <param name="newPath">New path.</param>
// 		public static void RenameModule(string oldPath, string newPath)
// 		{
// 			//Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (oldPath == null)
// 				throw new ArgumentNullException("oldName");
// 			if (newPath == null)
// 				throw new ArgumentNullException("newName");
// 			if (!ModuleExists(oldPath))
// 				throw new ModuleDoesNotExistException(oldPath);
// 			if (ModuleExists(newPath))
// 				throw new ModuleAlreadyExistsException(newPath);
// 			if (oldPath.Equals(newPath))
// 				return;

// 			AddModule(newPath);
// 			XmlNode newModule = GetModule(newPath);
// 			XmlNode oldModule = GetModule(oldPath);

// 			XmlNodeList childs = oldModule.ChildNodes;
// 			while (childs.Count > 0)
// 				newModule.AppendChild(childs.Item(0));
// 			RemoveModule(oldPath);
// 		}
// 		/// <summary>
// 		/// Renames the constant.
// 		/// </summary>
// 		/// <param name="path">Path of the constant's module.</param>
// 		/// <param name="oldName">Old name.</param>
// 		/// <param name="newName">New name.</param>
// 		public static void RenameConstant(string path, string oldName, string newName)
// 		{
// 			// Error handling
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException(nameof(path));
// 			if (oldName == null)
// 				throw new ArgumentNullException(nameof(oldName));
// 			if (newName == null)
// 				throw new ArgumentNullException(nameof(newName));
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);
// 			if (!ConstantExists(GetModule(path), oldName))
// 				throw new ConstantDoesNotExistException(path, oldName);
// 			if (ConstantExists(GetModule(path), newName))
// 				throw new ConstantAlreadyExistsException(path, newName);
// 			if (oldName.Equals(newName))
// 				return;

// 			XmlNode oldConstant = GetConstant(path, oldName);
// 			AddConstant(path, newName, oldConstant.InnerText);
// 			RemoveConstant(path, oldName);
// 		}

// 		/// <summary>
// 		/// Gives a new value to the constant.
// 		/// </summary>
// 		/// <param name="path">Path of the constant's module.</param>
// 		/// <param name="name">Constant Name.</param>
// 		/// <param name="value">Constant's new value.</param>
// 		public static void RevalueConstant(string path, string name, string value)
// 		{
// 			//Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("path");
// 			if (name == null)
// 				throw new ArgumentNullException("name");
// 			if (value == null)
// 				throw new ArgumentNullException("value");
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);
// 			if (!ConstantExists(GetModule(path), name))
// 				throw new ConstantDoesNotExistException(path, name);

// 			XmlNode constant = GetConstant(path, name);
// 			constant.Value = value;
// 		}
// 		/// <summary>
// 		/// Cleans the module at path, removing all of its constants.
// 		/// </summary>
// 		public static void CleanModule(string path)
// 		{
// 			//Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("path");
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);

// 			RemoveModule(path);
// 			AddModule(path);
// 		}

// 		//========================================
// 		//Remove
// 		//========================================
// 		/// <summary>
// 		/// Removes the given module, including its child modules and constants.
// 		/// </summary>
// 		/// <param name="path">Path to the module.</param>
// 		public static void RemoveModule(string path)
// 		{
// 			//Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("path");
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);

// 			XmlNode module = GetModule(path);
// 			module.ParentNode.RemoveChild(module);
// 		}
// 		/// <summary>
// 		/// Removes the specified constant.
// 		/// </summary>
// 		/// <param name="path">Path to the constant.</param>
// 		/// <param name="name">Name of the constant.</param>
// 		public static void RemoveConstant(string path, string name)
// 		{
// 			//Error handling
// 			if (!DocumentExists())
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("path");
// 			if (name == null)
// 				throw new ArgumentNullException("name");
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);
// 			if (!ConstantExists(GetConstant(path, name), path))
// 				throw new ConstantDoesNotExistException(path, name);

// 			XmlNode moduleNode = GetModule(path);
// 			XmlNode constant = GetConstantNode(path, name);
// 			moduleNode.RemoveChild(constant);
// 		}

// 		//========================================
// 		//Getters
// 		//========================================
// 		/// <summary>
// 		/// Checks whether the XML Document has been already created.
// 		/// </summary>
// 		public static bool DocumentExists()
// 		{
// 			return Document != null && File.Exists(fullPath);
// 			// return File.Exists(fullPath);
// 		}
// 		public static bool DocumentExists(string path)
// 		{
// 			// return Document != null;
// 			return File.Exists(path);
// 		}
// 		/// <summary>
// 		/// Checks whether the given path exists as a module.
// 		/// </summary>
// 		/// <param name="path">Path to the module.</param>
// 		public static bool ModuleExists(string path)
// 		{
// 			return GetModule(path) != null;
// 		}
// 		public static XmlNode GetModule(string path)
// 		{
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException(nameof(path));

// 			// Select the module element with the specified path using XPath
// 			XmlNode moduleNode = Document.SelectSingleNode($"//module[@path='{path}']");
// 			return moduleNode;
// 		}
// 		static XmlNode GetModule(string name, XmlNode parent)
// 		{
// 			//Error handling
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();
// 			if (name == null)
// 				throw new ArgumentNullException("name");
// 			if (parent == null)
// 				throw new ArgumentNullException("parent");

// 			XmlNodeList childNodes = parent.ChildNodes;
// 			XmlNode module = null;
// 			for (int i = 0; i < childNodes.Count; i++)
// 			{
// 				if (childNodes.Item(i).Name != MODULE_LABEL)
// 					continue;
// 				if (name.Equals(childNodes.Item(i).Attributes.GetNamedItem(MODULE_ATTRIBUTE_NAME).Value, StringComparison.InvariantCultureIgnoreCase))
// 				{
// 					module = childNodes.Item(i);
// 					break;
// 				}
// 			}
// 			return module;
// 		}
// 		/// <summary>
// 		/// Gets all module paths.
// 		/// </summary>
// 		/// <returns>An array containing all the paths in the file.</returns>
// 		public static string[] GetAllModules()
// 		{
// 			//Error handling
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();

// 			XmlNode[] modules = GetAllModules(Document.DocumentElement);
// 			string[] paths = new string[modules.Length];
// 			for (int i = 0; i < modules.Length; i++)
// 				paths[i] = GetModulePath(modules[i]);
// 			return paths;
// 		}
// 		static XmlNode[] GetAllModules(XmlNode node)
// 		{
// 			XmlNodeList childNodes = node.ChildNodes;

// 			List<XmlNode> childModules = new List<XmlNode>();
// 			for (int i = 0; i < childNodes.Count; i++)
// 			{
// 				if (childNodes.Item(i).Name != MODULE_LABEL)
// 					continue;
// 				childModules.Add(childNodes.Item(i));
// 			}

// 			List<XmlNode> allModules = new List<XmlNode>();
// 			for (int i = 0; i < childModules.Count; i++)
// 			{
// 				allModules.Add(childModules[i]);
// 				allModules.AddRange(GetAllModules(childModules[i]));
// 			}
// 			return allModules.ToArray();
// 		}

// 		static string GetModulePath(XmlNode module)
// 		{
// 			if (module == Document.DocumentElement)
// 				return null;

// 			string parentPath = GetModulePath(module.ParentNode);
// 			string myPath = module.Attributes.Item(0).Value;
// 			if (parentPath != null)
// 				myPath = parentPath + "." + myPath;
// 			return myPath;
// 		}
// 		/// <summary>
// 		/// Checks whether the given module contains the specified constant
// 		/// </summary>
// 		/// <param name="path">Constant's path.</param>
// 		/// <param name="name">Constant's name.</param>

// 		public static bool ConstantExists(XmlNode moduleNode, string name)
// 		{
// 			// Check if the constant exists within the module node
// 			if (moduleNode == null)
// 				return false;

// 			foreach (XmlNode childNode in moduleNode.ChildNodes)
// 			{
// 				if (childNode.NodeType == XmlNodeType.Element && childNode.Attributes[name] != null)
// 				{
// 					return true;
// 				}
// 			}
// 			return false;
// 		}
// 		static XmlNode GetConstant(string path, string name)
// 		{
// 			//Error handling
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("module");
// 			if (name == null)
// 				throw new ArgumentNullException("name");
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);

// 			XmlNode moduleNode = GetModule(path);
// 			XmlNodeList childNodes = moduleNode.ChildNodes;

// 			XmlNode node = null;
// 			for (int i = 0; i < childNodes.Count; i++)
// 			{
// 				if (name.Equals(childNodes.Item(i).Attributes.Item(0).Name, StringComparison.InvariantCultureIgnoreCase))
// 				{
// 					node = childNodes.Item(i).Attributes.Item(0);
// 					break;
// 				}
// 			}
// 			return node;
// 		}
// 		static XmlNode GetConstantNode(string path, string name)
// 		{
// 			XmlNode constant = GetConstant(path, name);
// 			XmlNode node = null;
// 			if (constant != null)
// 				node = ((XmlAttribute)constant).OwnerElement;
// 			return node;
// 		}
// 		/// <summary>
// 		/// Gets all constants from the given module
// 		/// </summary>
// 		/// <returns>A List containing all the constants in the given path. The Key contains the name of the constant, and the Value, er... its value.</returns>
// 		/// <param name="path">Path.</param>
// 		public static KeyValuePair<string, string>[] GetAllConstants(string path)
// 		{
// 			//Error handling
// 			if (Document == null)
// 				throw new XmlDocumentDoesNotExistException();
// 			if (path == null)
// 				throw new ArgumentNullException("module");
// 			if (!ModuleExists(path))
// 				throw new ModuleDoesNotExistException(path);

// 			XmlNode moduleNode = GetModule(path);
// 			XmlNodeList childs = moduleNode.ChildNodes;
// 			List<KeyValuePair<string, string>> constants = new List<KeyValuePair<string, string>>();

// 			XmlNode node = null;
// 			for (int i = 0; i < childs.Count; i++)
// 			{
// 				if (childs.Item(i).Name != CONSTANT_LABEL)
// 					continue;
// 				node = childs.Item(i).Attributes.Item(0);
// 				constants.Add(new KeyValuePair<string, string>(node.Name, node.Value));
// 			}
// 			return constants.ToArray();
// 		}

// 		//========================================
// 		//Utils
// 		//========================================
// 		/// <summary>
// 		/// Saves changes to disc.
// 		/// </summary>
// 		public static void Save()
// 		{
// 			if (!DocumentExists())
// 			{
// 				return;
// 			}

// 			_document.Save(fullPath);
// 			AssetDatabase.ImportAsset(fullPath, ImportAssetOptions.ForceSynchronousImport);
// 		}
// 	}



// }